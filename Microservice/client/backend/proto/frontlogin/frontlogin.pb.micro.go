// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/frontlogin.proto

package frontlogin

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Frontlogin service

func NewFrontloginEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Frontlogin service

type FrontloginService interface {
	Frontlogin(ctx context.Context, in *FrontloginRequest, opts ...client.CallOption) (*FrontloginResponse, error)
}

type frontloginService struct {
	c    client.Client
	name string
}

func NewFrontloginService(name string, c client.Client) FrontloginService {
	return &frontloginService{
		c:    c,
		name: name,
	}
}

func (c *frontloginService) Frontlogin(ctx context.Context, in *FrontloginRequest, opts ...client.CallOption) (*FrontloginResponse, error) {
	req := c.c.NewRequest(c.name, "Frontlogin.Frontlogin", in)
	out := new(FrontloginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Frontlogin service

type FrontloginHandler interface {
	Frontlogin(context.Context, *FrontloginRequest, *FrontloginResponse) error
}

func RegisterFrontloginHandler(s server.Server, hdlr FrontloginHandler, opts ...server.HandlerOption) error {
	type frontlogin interface {
		Frontlogin(ctx context.Context, in *FrontloginRequest, out *FrontloginResponse) error
	}
	type Frontlogin struct {
		frontlogin
	}
	h := &frontloginHandler{hdlr}
	return s.Handle(s.NewHandler(&Frontlogin{h}, opts...))
}

type frontloginHandler struct {
	FrontloginHandler
}

func (h *frontloginHandler) Frontlogin(ctx context.Context, in *FrontloginRequest, out *FrontloginResponse) error {
	return h.FrontloginHandler.Frontlogin(ctx, in, out)
}
